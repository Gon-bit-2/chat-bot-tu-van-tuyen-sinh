import axios from "axios";

// T·∫°o instance axios v·ªõi config m·∫∑c ƒë·ªãnh
const axiosConfig = axios.create({
  baseURL: import.meta.env.VITE_API_URL,
  timeout: 10000, // 10 gi√¢y
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
});

// Request interceptor - x·ª≠ l√Ω tr∆∞·ªõc khi g·ª≠i request
axiosConfig.interceptors.request.use(
  (config) => {
    // Th√™m token v√†o header n·∫øu c√≥
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    // Log request ƒë·ªÉ debug (ch·ªâ trong development)
    if (import.meta.env.DEV) {
      console.log("üöÄ Request:", {
        method: config.method?.toUpperCase(),
        url: config.url,
        data: config.data,
      });
    }

    return config;
  },
  (error) => {
    console.error("‚ùå Request Error:", error);
    return Promise.reject(error);
  }
);

// Response interceptor - x·ª≠ l√Ω response tr∆∞·ªõc khi tr·∫£ v·ªÅ
axiosConfig.interceptors.response.use(
  (response) => {
    // Log response ƒë·ªÉ debug (ch·ªâ trong development)
    if (import.meta.env.DEV) {
      console.log("‚úÖ Response:", {
        status: response.status,
        url: response.config.url,
        data: response.data,
      });
    }

    return response;
  },
  (error) => {
    // X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn
    if (error.response) {
      const { status, data } = error.response;

      switch (status) {
        case 401:
          // Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
          localStorage.removeItem("token");
          localStorage.removeItem("refreshToken");
          localStorage.removeItem("user");
          // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang login n·∫øu kh√¥ng ph·∫£i trang auth
          if (
            !window.location.pathname.includes("/login") &&
            !window.location.pathname.includes("/register")
          ) {
            window.location.href = "/login";
          }
          break;
        case 403:
          console.error("‚ùå Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p");
          break;
        case 404:
          console.error("‚ùå Kh√¥ng t√¨m th·∫•y resource");
          break;
        case 500:
          console.error("‚ùå L·ªói server");
          break;
        default:
          console.error(
            `‚ùå HTTP Error ${status}:`,
            data?.message || "Unknown error"
          );
      }
    } else if (error.request) {
      console.error("‚ùå Network Error:", error.message);
    } else {
      console.error("‚ùå Error:", error.message);
    }

    return Promise.reject(error);
  }
);

// C√°c helper functions ƒë·ªÉ s·ª≠ d·ª•ng d·ªÖ d√†ng h∆°n

// Export c·∫£ instance axios g·ªëc ƒë·ªÉ s·ª≠ d·ª•ng trong tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
export default axiosConfig;
